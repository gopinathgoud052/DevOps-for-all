Docker 


What is Docker ?
Docker is a containerization platform that provides easy way to containerize your applications, which means, using Docker you can build container images, 
run the images to create containers and also push these containers to container registries such as Docker Hub, Quay.io and so on.

In simple words, you can understand as containerization is a concept or technology and Docker Implements Containerization.

Docker Life Cycle
We can use the above Image as reference to understand the lifecycle of Docker.


There are three important things,

docker build -> builds docker images from Docker file
docker run -> runs container from docker images
docker push -> push the container image to public/private registries to share the docker images.

Docker daemon
The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes.
A daemon can also communicate with other daemons to manage Docker services.

Docker client
The Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run,
the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can communicate with more 
than one daemon.

Docker Desktop
Docker Desktop is an easy-to-install application for your Mac, Windows or Linux environment that enables you to build and share containerized
applications and microservices. Docker Desktop includes the Docker daemon (dockerd), the Docker client (docker), Docker Compose, Docker Content Trust,
Kubernetes, and Credential Helper. For more information, see Docker Desktop.

Docker registries
A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on
Docker Hub by default. You can even run your own private registry.

Docker file
Docker file is a file where you provide the steps to build your Docker Image.

Images
An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional
customization. For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application,
as well as the configuration details needed to make your application run.


For best practice please go through this link "https://docs.docker.com/get-started/workshop/"

