Part 1: Basic YAML Concepts 
Before diving into Kubernetes-specific YAML, understand the basics of YAML 
syntax:

1. Key-Value Pairs:
>> YAML uses key: value pairs for defining configurations.
name: my-app
version: 1.0

2. Nested Structures:
>> Indentation indicates hierarchy.
metadata:
name: my-app
labels:
app: frontend

3. Lists:
>> Use dashes (-) for defining lists.
containers: - name: nginx
image: nginx:latest
---------------------------------------------------------------------------------------------------
Part 2: Starting with Basic Kubernetes YAML Files
We begin with the simplest Kubernetes resources: Pods.
1. Writing a Pod YAML File
apiVersion: v1
kind: Pod
metadata:
name: basic-pod
spec:
containers: - name: nginx-container
image: nginx:latest
Explanation:
 apiVersion: Defines the Kubernetes API version.
 kind: Specifies the resource type (Pod).
 metadata: Contains the resource name (basic-pod).
 spec: Describes the container within the Pod:
o name: Name of the container.
o image: Specifies the Docker image to use.
------------------------------------------------------------------------------------------------------------------------------------
Part 3: Intermediate Kubernetes YAML Files
After understanding Pods, learn how to scale applications with Deployments.
2. Writing a Deployment YAML File
apiVersion: apps/v1
kind: Deployment
metadata:
name: intermediate-deployment
spec:
replicas: 2
selector:
matchLabels:
app: nginx
template:
metadata:
labels:
app: nginx
spec:
containers: - name: nginx-container
image: nginx:1.21.6
ports: - containerPort: 80
Key Additions:
 replicas: Defines the number of Pods to run.
 selector: Matches labels for Pods managed by the Deployment.
 template:
o metadata: Defines labels for Pods.
o spec: Contains container details, including exposed ports.
